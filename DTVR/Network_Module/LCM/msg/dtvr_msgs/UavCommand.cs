/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace dtvr_msgs
{
    public sealed class UavCommand : LCM.LCM.LCMEncodable
    {
        public byte ComMode;
        public bool IsOffboard;
        public bool IsArm;
        public bool IsStart;
 
        public UavCommand()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x04ca576b64f5e072L;
 
        static UavCommand()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("dtvr_msgs.UavCommand"))
                return 0L;
 
            classes.Add("dtvr_msgs.UavCommand");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.ComMode); 
 
            outs.Write(this.IsOffboard); 
 
            outs.Write(this.IsArm); 
 
            outs.Write(this.IsStart); 
 
        }
 
        public UavCommand(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public UavCommand(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static dtvr_msgs.UavCommand _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            dtvr_msgs.UavCommand o = new dtvr_msgs.UavCommand();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.ComMode = ins.ReadByte();
 
            this.IsOffboard = ins.ReadBoolean();
 
            this.IsArm = ins.ReadBoolean();
 
            this.IsStart = ins.ReadBoolean();
 
        }
 
        public dtvr_msgs.UavCommand Copy()
        {
            dtvr_msgs.UavCommand outobj = new dtvr_msgs.UavCommand();
            outobj.ComMode = this.ComMode;
 
            outobj.IsOffboard = this.IsOffboard;
 
            outobj.IsArm = this.IsArm;
 
            outobj.IsStart = this.IsStart;
 
            return outobj;
        }
    }
}

