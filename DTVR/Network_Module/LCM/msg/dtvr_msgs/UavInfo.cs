/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace dtvr_msgs
{
    public sealed class UavInfo : LCM.LCM.LCMEncodable
    {
        public double PosX;
        public double PosY;
        public double PosZ;
        public double RotX;
        public double RotY;
        public double RotZ;
        public double RotW;
        public double LVelX;
        public double LVelY;
        public double LVelZ;
        public double AVelX;
        public double AVelY;
        public double AVelZ;
        public bool NetPx4;
        public bool IsArm;
        public byte FMode;
        public float Voltage;
        public float Remaining;
 
        public UavInfo()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xd8ab4c41a1b50198L;
 
        static UavInfo()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("dtvr_msgs.UavInfo"))
                return 0L;
 
            classes.Add("dtvr_msgs.UavInfo");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            outs.Write(this.PosX); 
 
            outs.Write(this.PosY); 
 
            outs.Write(this.PosZ); 
 
            outs.Write(this.RotX); 
 
            outs.Write(this.RotY); 
 
            outs.Write(this.RotZ); 
 
            outs.Write(this.RotW); 
 
            outs.Write(this.LVelX); 
 
            outs.Write(this.LVelY); 
 
            outs.Write(this.LVelZ); 
 
            outs.Write(this.AVelX); 
 
            outs.Write(this.AVelY); 
 
            outs.Write(this.AVelZ); 
 
            outs.Write(this.NetPx4); 
 
            outs.Write(this.IsArm); 
 
            outs.Write(this.FMode); 
 
            outs.Write(this.Voltage); 
 
            outs.Write(this.Remaining); 
 
        }
 
        public UavInfo(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public UavInfo(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static dtvr_msgs.UavInfo _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            dtvr_msgs.UavInfo o = new dtvr_msgs.UavInfo();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.PosX = ins.ReadDouble();
 
            this.PosY = ins.ReadDouble();
 
            this.PosZ = ins.ReadDouble();
 
            this.RotX = ins.ReadDouble();
 
            this.RotY = ins.ReadDouble();
 
            this.RotZ = ins.ReadDouble();
 
            this.RotW = ins.ReadDouble();
 
            this.LVelX = ins.ReadDouble();
 
            this.LVelY = ins.ReadDouble();
 
            this.LVelZ = ins.ReadDouble();
 
            this.AVelX = ins.ReadDouble();
 
            this.AVelY = ins.ReadDouble();
 
            this.AVelZ = ins.ReadDouble();
 
            this.NetPx4 = ins.ReadBoolean();
 
            this.IsArm = ins.ReadBoolean();
 
            this.FMode = ins.ReadByte();
 
            this.Voltage = ins.ReadSingle();
 
            this.Remaining = ins.ReadSingle();
 
        }
 
        public dtvr_msgs.UavInfo Copy()
        {
            dtvr_msgs.UavInfo outobj = new dtvr_msgs.UavInfo();
            outobj.PosX = this.PosX;
 
            outobj.PosY = this.PosY;
 
            outobj.PosZ = this.PosZ;
 
            outobj.RotX = this.RotX;
 
            outobj.RotY = this.RotY;
 
            outobj.RotZ = this.RotZ;
 
            outobj.RotW = this.RotW;
 
            outobj.LVelX = this.LVelX;
 
            outobj.LVelY = this.LVelY;
 
            outobj.LVelZ = this.LVelZ;
 
            outobj.AVelX = this.AVelX;
 
            outobj.AVelY = this.AVelY;
 
            outobj.AVelZ = this.AVelZ;
 
            outobj.NetPx4 = this.NetPx4;
 
            outobj.IsArm = this.IsArm;
 
            outobj.FMode = this.FMode;
 
            outobj.Voltage = this.Voltage;
 
            outobj.Remaining = this.Remaining;
 
            return outobj;
        }
    }
}

