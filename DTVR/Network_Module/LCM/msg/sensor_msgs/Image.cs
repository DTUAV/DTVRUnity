/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace sensor_msgs
{
    public sealed class Image : LCM.LCM.LCMEncodable
    {
        public int height;
        public int width;
        public String encoding;
        public int step;
        public int data_size;
        public byte[] data;
 
        public Image()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x32fd26b678d3a070L;
 
        static Image()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("sensor_msgs.Image"))
                return 0L;
 
            classes.Add("sensor_msgs.Image");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.height); 
 
            outs.Write(this.width); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.encoding); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.step); 
 
            outs.Write(this.data_size); 
 
            for (int a = 0; a < this.data_size; a++) {
                outs.Write(this.data[a]); 
            }
 
        }
 
        public Image(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public Image(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static sensor_msgs.Image _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            sensor_msgs.Image o = new sensor_msgs.Image();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.height = ins.ReadInt32();
 
            this.width = ins.ReadInt32();
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.encoding = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.step = ins.ReadInt32();
 
            this.data_size = ins.ReadInt32();
 
            this.data = new byte[(int) data_size];
            for (int a = 0; a < this.data_size; a++) {
                this.data[a] = ins.ReadByte();
            }
 
        }
 
        public sensor_msgs.Image Copy()
        {
            sensor_msgs.Image outobj = new sensor_msgs.Image();
            outobj.height = this.height;
 
            outobj.width = this.width;
 
            outobj.encoding = this.encoding;
 
            outobj.step = this.step;
 
            outobj.data_size = this.data_size;
 
            outobj.data = new byte[(int) data_size];
            for (int a = 0; a < this.data_size; a++) {
                outobj.data[a] = this.data[a];
            }
 
            return outobj;
        }
    }
}

